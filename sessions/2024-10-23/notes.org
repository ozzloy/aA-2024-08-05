* aa11-sequelize-create-migrations
no notes taken during this one, oops
* aa11-sequelize-undo-migrations
** setup commands
=sh setup-commands.sh=
#+begin_src bash
  cd server
  npx dotenv sequelize db:migrate
  sqlite3 db/dev.db ".schema Cats"
#+end_src
should get this output
#+begin_quote
  $ sqlite3 db/dev.db ".schema Cats"
  -- Loading resources from /home/ozzloy/.sqliterc
  CREATE TABLE `Cats` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` VARCHAR(255), `weight` FLOAT);
#+end_quote

then undo
#+begin_src bash
  npx dotenv sequelize db:migrate:undo:all
  sqlite3 db/dev.db ".schema Cats"
#+end_src

should get this output
#+begin_quote
  $ sqlite3 db/dev.db ".schema Cats"
  -- Loading resources from /home/ozzloy/.sqliterc
#+end_quote

then redo again, so you can undo a specific migration
#+begin_src bash
  npx dotenv sequelize db:migrate
  npx dotenv -- sequelize db:migrate:undo:all --to DATETIME-create-cats.js
#+end_src
* aa11-sequelize-models

#+begin_src bash
  sh setup-commands.sh
  cd server
#+end_src

generic command structure:
#+begin_src bash
  npx sequelize model:generate --name <NameOfModel> --attributes <column1Name:type,column2Name:type>
#+end_src

specific example:
#+begin_src bash
  npx sequelize mode:generate --name Color --attributes name:string
#+end_src

note: capitalized, singular name of model

** modify the migration, db, constraints
some popular constraints
#+begin_src javascript
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
#+end_src

** modify the model, js, validations
#+begin_src javascript
  Color.init(
    {
      name: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
      },
    },
    {
      sequelize,
      modelName: "Color",
    },
  );
#+end_src

** run the migration
#+begin_src bash
  npx dotenv -- sequelize db:migrate
#+end_src

** check that it worked
#+begin_src bash
  sqlite3 db/dev.db ".schema Colors"
  npm test
#+end_src

* bonus
add a new attribute, =isPrimary=.

to do that, first we will take down the table
#+begin_src bash
  npx dotenv -- sequelize db:migrate:undo
#+end_src

then we will modify the file
=server/db/migrations/20241022153429-create-color.js=

to add the column

then go into the model file
=server/db/models/color.js=

#+begin_src javascript
  "use strict";
const { Model } = require("sequelize");
module.exports = (sequelize, DataTypes) => {
  class Color extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
    }
  }
  Color.init(
    {
      name: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
      },
      isPrimary: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false,
        validate: {
          isPrimaryColor(value) {
            const name = this.name ? this.name.toLowerCase() : "";
            const primaryColors = ["red", "blue", "yellow"];
            const shouldBePrimary = primaryColors.includes(name);
            // attempted to set isPrimary to true,
            //    but purple is not a primary color
            // attempted to set isPrimary to false,
            //    but red is a primary color
            if (value !== shouldBePrimary) {
              throw new Error(
                "attempted to set isPrimary to " +
                  value +
                  ", but " +
                  this.name +
                  " is " +
                  (shouldBePrimary ? "" : "not") +
                  " a primary color.",
              );
            }
          },
        },
      },
    },
    {
      sequelize,
      modelName: "Color",
    },
  );
  return Color;
};
#+end_src

* aa11-sequelize-seeders

** bulkCreate
=bulkCreate= is called on the model, so need to import it
#+begin_src javascript
const { Color } = require("../models");
#+end_src
and make sure to add the option =validate: true=
#+begin_src javascript
    await Color.bulkCreate([
      { name: "red" },
      { name: "blue" },
      { name: "yellow" },
    ], { validate: true });
#+end_src

then write the =down= to remove these seed records
#+begin_src javascript
    await queryInterface.bulkDelete("Colors", {
      name: ["red", "blue", "yellow"],
    });
#+end_src

* aa11-sequelize-validations-and-constraints
#+begin_src bash
  sh setup-commands.sh
  cd server
#+end_src

add validations in model file =db/models/color.js=
#+begin_src js
        validate: {
          len: {
            args: [2, 20],
            msg: "name must be between 2 and 20 characters",
          },
          noEndingInY(value) {
            if (value.slice(-1) === "y") {
              throw new Error("name must not end with 'y'");
            }
          },
#+end_src
* aa11-sequelize-modify-table-migrations
#+begin_src bash
  sh setup-commands.sh
  cd server
  npx dotenv -- sequelize db:migrate
  sqlite3 db/dev.db ".tables"
  sqlite3 db/dev.db
#+end_src

#+begin_src sql
  SELECT * FROM Colors;
  SELECT * FROM Cats;
  SELECT * FROM Games;
#+end_src

see if the tables exist and have data

#+begin_src bash
  npx sequelize migration:generate --name add-age-to-cats
#+end_src

the file =server/db/migrations/DATETIME-add-age-to-cats.js=:
#+begin_src javascript
  // up
  queryInterface.addColumn("Cats", "age", {
    type: Sequelize.FLOAT,
  });
  // down
  await queryInterface.removeColumn("Cats", "age");
#+end_src

#+begin_src bash
  npx dotenv -- sequelize db:migrate
  sqlite3 db/dev.db ".schema Cats"
#+end_src
look for the age column in the Cats schema output.

** add constraints to existing column in Colors
#+begin_src javascript
  // up
  await queryInterface.addConstraint("Colors", {
    fields: ["name"],
    type: "unique",
    name: "colors_name_unique_constraint",
  });

  // down
  await queryInterface.removeConstraint(
    "Colors",
    "color_name_unique_constraint",
  );
#+end_src

run the migration, see if the column has the new constraint

#+begin_src bash
  npx dotenv -- sequelize db:migrate
  sqlite3 db/dev.db ".schema Colors"
#+end_src
look at the bottom of the output to see the constraint

** rename a column
#+begin_src bash
  npx sequelize migration:generate --name rename-games-numPlayers-and-remove-estPlayTime
#+end_src

then in the file,
=20241022185838-rename-games-numPlayers-and-remove-estPlayTime.js=:
#+begin_src javascript
  // up
  await queryInterface.renameColumn("Games", "numPlayers", "maxPlayers");
  await queryInterface.removeColumn("Games", "estPlayTime");

  // down
  await queryInterface.renameColumn("Games", "maxPlayers", "numPlayers");
  await queryInterface.addColumn("Games", "estPlayTime", {
    type: Sequelize.INTEGER,
    allowNull: true,
  });
#+end_src

* break!

* let's gooo! create a project from scratch
setting up is the hardest part
  + migrations
  + models
  + seeds

#+begin_src bash
  npx dotenv -- sequelize init
  npx dotenv -- sequelize model:generate --name Puppy --attributes name:string
#+end_src

#+begin_src bash
  mkdir server-2024-10-23
  cd server-2024-10-23
  npm init -y
  npm install sequelize dotenv express
  npm install -D dotenv-cli sequelize-cli
#+end_src

#+begin_src javascript
  /*
    if you wanted to execute the following sql,
    SELECT * FROM Users;
    the equivalent finder method is

    const users = await User.findAll();

    const user = await Puppy.findOne();

    or you can get just name and age
    const puppies = away puppy.findAll({
      attributes: ["name", "age"]
    });
  ,*/

  // WHERE
  const ralphPuppies = await puppy.findAll({
    where: {
      name: "ralph"
    }
  });
#+end_src

** comparison operators in sequelize are weird

in sequelize, the comparison operators are inside an object called Op
#+begin_src js
  const { Op } = require("sequelize");

  puppy.findOne({
    where: {
      id: {
        [Op.gte]: 3,
      },
    },
  });

  puppy.findOne({
    where: {
      [Op.or]: [
        {
          name: "Ralph"
        },
        {
          id: 3
        }
      ]
    }
  });
#+end_src

** inserting stuff into db

=create= is =build= ing and =save= ing
#+begin_src js
  const newPuppy = Puppy.build({ name: "Goob", age: 3 });
  // an error could happen when building due to invalid data
  await newPuppy.validate();

  await newPuppy.save();

  // create does build + save inside itself
  const newPuppy2 = Puppy.create({ name: "goobles", age: 2 });

  const puppies = await Puppy.bulkCreate([
    {name: "jerry", age: 4},
    {name: "apples", age: 1},
  ]);
#+end_src

** updating
#+begin_src js
  const puppy = await Puppy.findOne({ where: {id: 3}});
#+end_src

#+begin_src js
  app.patch("/puppies/:puppyId", async (req, res) => {
    const puppyId = req.params.puppyId;
    const { name, age } = req.body;

    const puppy = await Puppy.findOne({
      where: {
        id: puppyId
      }
    });

    puppy.set({
      name,
      age
    });

    await puppy.save();
    res.json(puppy);
  });
#+end_src

** deleting is fun, you just destroy stuff

first, find record to delete, then destroy it
#+begin_src js
  const puppy = await Puppy.findOne({ where: { id: 3 } });

  await puppy.destroy();

  // to delete multiple
  await Puppy.destroy({
    where: {
      name: "ralph"
    }
  });
#+end_src

#+begin_src js
  app.delete("/puppy/:puppyId", async (req, res) => {
    const puppy = await Puppy.findOne({
      where: {
        id: puppyId
      }
    });

    await puppy.destroy();
  });
#+end_src

* foreign key column migrations
https://appacademy.instructure.com/courses/314/pages/foreign-key-column-migrations-2?module_item_id=56329

* aa11-sequelize-select-queries
#+begin_src js
  const allPuppies = await Puppy.findAll({ order: [["name", "ASC"]] });
#+end_src

** step 2
#+begin_src js
  const chippedPuppies = await Puppy.findAll({
    where: {
      microchipped: true,
    },
    order: [
      ["ageYrs", "DESC"],
      ["name", "ASC"],
    ],
  });
#+end_src

** step 3: select one puppy by name
#+begin_src js
  const { name } = req.params;
  const puppyByName = await Puppy.findOne({
    where: { name },
  });

  res.json(puppyByName);
#+end_src
** step 4
#+begin_src js
  const { id } = req.params;
  const puppyById = await Puppy.findOne({ where: { id } });

  res.json(puppyById);
#+end_src
* aa11-sequelize-insert
** step 1: build a new puppy
#+begin_src js
    const puppy = await Puppy.build({
      name: "Trudy",
      ageYrs: 2,
      weightLbs: 38,
      breed: "Brittany Spaniel",
      microchipped: false,
    });
    await puppy.save();
    return puppy;
#+end_src

** step 2: create a new puppy
#+begin_src js
    const puppy = await Puppy.create({
      name: "Beans",
      ageYrs: 1.6,
      weightLbs: 42,
      breed: "Bulldog",
      microchipped: true,
    });
    return puppy;
#+end_src

** step 3: now we create endpoints
#+begin_src js
  app.post("/puppies/build", async (req, res, next) => {
    const { name, ageYrs, breed, weightLbs, microchipped } = req.body;
    const puppy = Puppy.build({
      name,
      ageYrs,
      breed,
      weightLbs,
      microchipped,
    });
    await puppy.save();
    res.json({
      message: "successfully created new puppy record",
      data: puppy,
    });
  });

  //....
  app.post("/puppies/create", async (req, res, next) => {
    const { name, ageYrs, breed, weightLbs, microchipped } = req.body;
    const puppy = await Puppy.create({
      name,
      ageYrs,
      breed,
      weightLbs,
      microchipped,
    });
    res.json({
      message: "successfully created new puppy record",
      data: puppy,
    });
  });
#+end_src

* =cd ../aa11-sequelize-update-delete-singular/=
** step 1
#+begin_src js
app.put("/puppies/:id", async (req, res, next) => {
  const { id } = req.params;
  const puppy = await Puppy.findByPk(id);

  const { ageYrs, weightLbs, microchipped } = req.body;

  if (ageYrs !== undefined) puppy.ageYrs = ageYrs;
  if (weightLbs !== undefined) puppy.weightLbs = weightLbs;
  if (microchipped !== undefined) puppy.microchipped = microchipped;

  await puppy.save();

  res.json({
    message: "updated puppy " + id,
    puppy,
  });
});
#+end_src

** step 2: delete puppy
#+begin_src js
app.delete("/puppies/:id", async (req, res, next) => {
  const { id } = req.params;
  const puppy = await Puppy.findOne({ where: { id } });
  await puppy.destroy();
  res.json({
    message: "deleted puppy " + id,
    puppy,
  });
});
#+end_src

* foreign key migrations
** step 1 one to many
#+begin_src bash
  npx sequelize migration:generate --name add-bandId-to-musicians
#+end_src

add band id to musicians.js
#+begin_src js
  await queryInterface.addColumn("Musicians", "bandId", {
    
                                 allowNull: false,
                                 references: {
                                   model: "Bands",
                                   },
                                 onDelete: "CASCADE"
                                 }
#+end_src

#+begin_src js
  await queryInterface.removeColumn("Musicians", "bandId");
#+end_src


musician.js
#+begin_src js
  static associate(models) {
    Musician.belongsTo(
      models.Band,
      { foreignKey: "bandId" }
    )
  }
#+end_src

band.js
#+begin_src js
  static associate(models){
    Band.hasMany(
      models.Musician,
      { foreignKey: "bandId",
        onDelete: "CASCADE"
      }
    )
  }
#+end_src

** many to many
need to create a join table

instrument <=> musician

#+begin_src bash
  npx sequelize migration:generate --name create-musician-instrument
#+end_src

db/migration/create-musician-instrument.js
#+begin_src js
  //up
  await queryInterface.
    id: {
      primaryKey: true,
      },
  musicianId: {
    type: sequelize.integer,
    allowNull: false,
  },
  instrumentId: {
    type: sequelize.integer,
    allowNull: false,
    references: {
      model: "Instruments"
    }


  //down
    await queryInterface.dropTable("MusicianInstruments");
#+end_src

now add the models for these two guys

db/models/musicianIntrument.js

copy paste the migration
#+begin_src js
  musicianId: datatypes.integer,
  intrumentId: datatypes.integer
#+end_src
