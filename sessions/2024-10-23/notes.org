* aa11-sequelize-create-migrations
no notes taken during this one, oops
* aa11-sequelize-undo-migrations
** setup commands
=sh setup-commands.sh=
#+begin_src bash
  cd server
  npx dotenv sequelize db:migrate
  sqlite3 db/dev.db ".schema Cats"
#+end_src
should get this output
#+begin_quote
  $ sqlite3 db/dev.db ".schema Cats"
  -- Loading resources from /home/ozzloy/.sqliterc
  CREATE TABLE `Cats` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` VARCHAR(255), `weight` FLOAT);
#+end_quote

then undo
#+begin_src bash
  npx dotenv sequelize db:migrate:undo:all
  sqlite3 db/dev.db ".schema Cats"
#+end_src

should get this output
#+begin_quote
  $ sqlite3 db/dev.db ".schema Cats"
  -- Loading resources from /home/ozzloy/.sqliterc
#+end_quote

then redo again, so you can undo a specific migration
#+begin_src bash
  npx dotenv sequelize db:migrate
  npx dotenv -- sequelize db:migrate:undo:all --to DATETIME-create-cats.js
#+end_src
* aa11-sequelize-models

#+begin_src bash
  sh setup-commands.sh
  cd server
#+end_src

generic command structure:
#+begin_src bash
  npx sequelize model:generate --name <NameOfModel> --attributes <column1Name:type,column2Name:type>
#+end_src

specific example:
#+begin_src bash
  npx sequelize mode:generate --name Color --attributes name:string
#+end_src

note: capitalized, singular name of model

** modify the migration, db, constraints
some popular constraints
#+begin_src ecmascript
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal("CURRENT_TIMESTAMP"),
#+end_src

** modify the model, js, validations
#+begin_src javascript
  Color.init(
    {
      name: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
      },
      isPrimary: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false,
        validate: {
          isPrimaryColor(value) {
            const name = this.name ? this.name.toLowerCase() : "";
            const primaryColors = ["red", "blue", "yellow"];
            const shouldBePrimary = primaryColors.includes(name);
            // attempted to set isPrimary to true,
            //    but purple is not a primary color
            // attempted to set isPrimary to false,
            //    but red is a primary color
            if (value !== shouldBePrimary) {
              throw new Error(
                "attempted to set isPrimary to " +
                  value +
                  ", but " +
                  this.name +
                  " is " +
                  (shouldBePrimary ? "" : "not") +
                  " a primary color.",
              );
            }
          },
        },
      },
    },
    {
      sequelize,
      modelName: "Color",
    },
  );
#+end_src
