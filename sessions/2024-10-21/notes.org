* let's gooo!
* long warmup
  + make projects
  + be excited during interviews
* going over assessment
* sequelize
https://appacademy.instructure.com/courses/314/pages/intro-to-sequelize-learning-objectives-2?module_item_id=56278

** efficiency
  + connecting to a db takes time
  + db is on a server somewhere else
    + not the same server running the rest of the app code, for example
    + so every query means doing a full network round trip
    + so cramming things into single query is often worth the effort
    + getting just the necessary data can be worth the effort
      + sending a small amount of data is faster than sending a large amount

*** N + 1 problem
#+begin_src javascript
  const petArr = ["dog", "cat", "parrot"];
  const toyArr = [];

  for (let i = 0; i < petArr.length; i++) {
    //...
    // this is N operations, where N = number
    // of elements in petArr
  }
#+end_src

#+begin_src sql
  SELECT type FROM pets;

  SELECT * FROM toys WHERE pet_type = 'dog';
  SELECT * FROM toys WHERE pet_type = 'cat';
  SELECT * FROM toys WHERE pet_type = 'parrot';
#+end_src

#+begin_src sql
  SELECT * FROM toys JOIN pets ON (pets.type = toys.pet_type);
#+end_src

#+begin_src sql
  SELECT * FROM pets;
  SELECT * FROM toys WHERE pet_type IN ('dog', 'cat', 'parrotf');
#+end_src

#+begin_src sql
  select * from toys where pet_type in (
    select type from pets
  );
#+end_src

count the number of semicolons

** indexes in sql
https://appacademy.instructure.com/courses/314/pages/intro-to-sql-indexes-2?module_item_id=56271

possibly not much value in adding indexes in the next few app academy
projects

allow faster lookup for data sorting

indexing can be used to make sure a combination of fields is unique.
for example, maybe duplicate first names are allowed, duplicate last
names are allowed, but every pair of first and last names must be
unique.

index creates an ordered balanced tree.
