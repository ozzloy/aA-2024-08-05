* let's gooo!
* long warmup
  + make projects
  + be excited during interviews
* going over assessment
* sequelize
https://appacademy.instructure.com/courses/314/pages/intro-to-sequelize-learning-objectives-2?module_item_id=56278

** efficiency
  + connecting to a db takes time
  + db is on a server somewhere else
    + not the same server running the rest of the app code, for example
    + so every query means doing a full network round trip
    + so cramming things into single query is often worth the effort
    + getting just the necessary data can be worth the effort
      + sending a small amount of data is faster than sending a large amount

*** N + 1 problem
#+begin_src javascript
  const petArr = ["dog", "cat", "parrot"];
  const toyArr = [];

  for (let i = 0; i < petArr.length; i++) {
    //...
    // this is N operations, where N = number
    // of elements in petArr
  }
#+end_src

#+begin_src sql
  SELECT type FROM pets;

  SELECT * FROM toys WHERE pet_type = 'dog';
  SELECT * FROM toys WHERE pet_type = 'cat';
  SELECT * FROM toys WHERE pet_type = 'parrot';
#+end_src

#+begin_src sql
  SELECT * FROM toys JOIN pets ON (pets.type = toys.pet_type);
#+end_src

#+begin_src sql
  SELECT * FROM pets;
  SELECT * FROM toys WHERE pet_type IN ('dog', 'cat', 'parrotf');
#+end_src

#+begin_src sql
  select * from toys where pet_type in (
    select type from pets
  );
#+end_src

count the number of semicolons

** indexes in sql
https://appacademy.instructure.com/courses/314/pages/intro-to-sql-indexes-2?module_item_id=56271

possibly not much value in adding indexes in the next few app academy
projects

allow faster lookup for data sorting

indexing can be used to make sure a combination of fields is unique.
for example, maybe duplicate first names are allowed, duplicate last
names are allowed, but every pair of first and last names must be
unique.

index creates an ordered balanced tree.

with indexing, column baker_id is ordered by baker_id.  so every baker
id will be in a big block.  so as soon as we see a different value, we
don't need to check any further values.

increase search speed, but slow down insert and delete operations.

*** how to make an index
naming convention is very descriptive
#+begin_src sql
  CREATE INDEX idx_table_name_column_names ON table_name(column_list);
#+end_src

#+begin_src sql
  CREATE INDEX
    idx_cookies_type_chocolate_baker_id
    ON cookies(type, chocolate, baker_id);
#+end_src

=PRIMARY KEY= and =UNIQUE= automatically create a single-column index
#+begin_src sql
  CREATE TABLE bakers (
    id INTEGER PRIMARY KEY,
    full_name VARCHAR UNIQUE
    );
#+end_src
the =UNIQUE= there makes the column =full_name= into an index.

this could also be done with a longer second statement.

#+begin_src sql
  CREATE UNIQUE INDEX
    -- i'm not fast enough to type it out
#+end_src

*** delete an index
#+begin_src sql
  DROP INDEX idx_cookies_type_chocolate;
#+end_src

*** order of an index matters
"most important index first so we can use it on its own."

not sure what that means.

first value is most important

make sure you'll be using that column most when searching

#+begin_src sql
  EXPLAIN QUERY PLAN SELECT * FROM cookies WHERE
    type = 'sugar';
#+end_src

result will be =SCAN= or =SEARCH=.

=SCAN= will check every row

=SEARCH= will use index table
