* python
#+begin_src bash
  mkdir new-proj
  cd new-proj
  pipenv install Flask
#+end_src
pipenv creates a new virtualenv for the project
#+begin_src bash
  wget -O .gitignore \
       https://raw.githubusercontent.com/github/gitignore/refs/heads/main/Python.gitignore
#+end_src

=project-dir/backend/app/app.py=
#+begin_src python
  from flask import Flask

  app = Flask(__name__) # instantiate the server

  @app.route("/")
  def home():
      return "<h1>home page</h1>"
#+end_src

to make endpoints, use =@app.route(ROUTE_HERE)=

and then you create a function that you want to run when the route is
hit.  Whatever this function returns will be sent back as a response

to run the flask server, all you need to do is run the command
#+begin_src bash
  flask run
#+end_src
however, you need env variables for this command to work.

because you need to tell flask where the server is.

the environment variable that you need is FLASK_APP=filename.py

we need to install python-dotenv in order to be able to read these
env variables

the environment variable that you need is ~FLASK_APP=filename.py~

NODEMON equivalent for flask -> add an env var ~FLASK_DEBUG=true~

=project/.flaskenv=
#+begin_src bash
  FLASK_APP=server.py
  FLASK_DEBUG=true
#+end_src

** options to run server
#+begin_src bash
  # opens a shell in virtual env
  pipenv shell

  flask run
#+end_src

OR

#+begin_src bash
  pipenv run flask run
#+end_src

specify port
#+begin_src bash
  flask run -p 5001
#+end_src

to crate an endpoint for requests other than get, add methods into the
decorator
#+begin_src python
  @app.route("/route", methods=["POST", "PUT", "DELETE", "PATCH"])
#+end_src

** to get request body out of a request
there are a few different ways
#+begin_src python
  from flask import request
#+end_src

another way
#+begin_src python
  request.json
#+end_src
take in json data and turn it into a python dict

** to get data out of query strings,
#+begin_src python
  request.args.get("cat_id")
#+end_src

** route parameters
to accept a route parameter, put it into angled brackets
#+begin_src python
  @app.route("/cat/<cat_id>")
  def create_cat(cat_id):
      print(cat_id)
      return cat_id
#+end_src

*** type checking on route params
it type checks, and type coerces
#+begin_src python
  @app.route("/cat/<int: cat_id>")
  def create_cat(cat_id, methods=["POST"]):
      print(cat_id)
      return cat_id
#+end_src

** make endpoints that run before and after requests

#+begin_src python
  @app.before_request
  def say_hi():
      print("hi")
  @app.after_request
  def say_bye():
      print("bye")
#+end_src

* mor routs
create a routes folder to hold all the routes

create a route file for each category of routes
#+begin_src bash
  mkdir routes
  touch routes/cats.py
#+end_src

=routes/cats.py=
#+begin_src python
  from flask import Blueprint

  bp = Blueprint("cats", __name__, url_prefix="/cats")
  # all routes in this file will start with "/cats"


  @bp.route("/")
  def get_all_cats():
      pass
#+end_src

