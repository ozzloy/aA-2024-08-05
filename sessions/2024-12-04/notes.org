#+begin_src python :results output
def decorator_func(func):
    def manipulated_func(fruit):
        return "manipulated " + func(fruit)
    return manipulated_func

@decorator_func
def return_fruit(fruit):
    return "your fruit is " + fruit

print(return_fruit("pear"))
#+end_src

#+RESULTS:
: manipulated your fruit is pear

#+begin_src python :results output
class Animal:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def __repr__(self):
        return f"Animal(name='{self.name}', age='{self.age}')"
    def __str__(self):
        return (
            "this is "
            + self.name
            + ".  "
            + self.name
            + " is "
            + str(self.age)
            + " years old."
        )

dog = Animal("onyx", 13)
print(dog)
print(str(dog))
print(repr(dog))
#+end_src

#+RESULTS:
: this is onyx.  onyx is 13 years old.
: this is onyx.  onyx is 13 years old.
: Animal(name='onyx', age='13')

javascript has express for server

javascript has sequelize for ORM

python has flask for server

python has sql alchemy for ORM
#+begin_src python :results output
  set1 = {1, 2, 3}
  set2 = {2, 4, 6}
  # print(a - b)        # => {1, 3}
  # print(b - a)        # => {4, 6}
  # print(a ^ b)        # => {1, 3, 4, 6}

  set1 = {1, 'hello', 3, 4}
  set2 = {'hello', 3, 6}
  print(set1 - set2)
  print(set1 ^ set2)
  print(set2 & set1)
#+end_src

#+RESULTS:
: {1, 4}
: {1, 4, 6}
: {3, 'hello'}
